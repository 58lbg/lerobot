Traceback (most recent call last):
  File "/backup/lerobots/lbg/lerobot/lerobot/scripts/train.py", line 288, in <module>
    train()
  File "/backup/lerobots/lbg/lerobot/lerobot/configs/parser.py", line 227, in wrapper_inner
    response = fn(cfg, *args, **kwargs)
  File "/backup/lerobots/lbg/lerobot/lerobot/scripts/train.py", line 110, in train
    cfg.validate()
  File "/backup/lerobots/lbg/lerobot/lerobot/configs/train.py", line 76, in validate
    self.policy = PreTrainedConfig.from_pretrained(policy_path, cli_overrides=cli_overrides)
  File "/backup/lerobots/lbg/lerobot/lerobot/configs/policies.py", line 176, in from_pretrained
    return draccus.parse(cls, config_file, args=cli_overrides)
  File "/home/it/anaconda3/envs/lerobot/lib/python3.10/site-packages/draccus/argparsing.py", line 211, in parse
    return parser.parse_args(args)
  File "/home/it/anaconda3/envs/lerobot/lib/python3.10/site-packages/draccus/argparsing.py", line 102, in parse_args
    args, _ = self.parse_known_args(args, namespace, is_parse_args=True)
  File "/home/it/anaconda3/envs/lerobot/lib/python3.10/site-packages/draccus/argparsing.py", line 136, in parse_known_args
    parsed_t = self._postprocessing(parsed_args)
  File "/home/it/anaconda3/envs/lerobot/lib/python3.10/site-packages/draccus/argparsing.py", line 180, in _postprocessing
    cfg = decoding.decode(self.config_class, deflat_d)
  File "/home/it/anaconda3/envs/lerobot/lib/python3.10/site-packages/draccus/parsers/registry_utils.py", line 78, in wrapper
    return base_func(*args, **kw)
  File "/home/it/anaconda3/envs/lerobot/lib/python3.10/site-packages/draccus/parsers/decoding.py", line 48, in decode
    return get_decoding_fn(cls)(raw_value, ())  # type: ignore
  File "/home/it/anaconda3/envs/lerobot/lib/python3.10/site-packages/draccus/parsers/decoding.py", line 185, in decode_choice_class
    raise ParsingError(f"Expected a dict with a '{CHOICE_TYPE_KEY}' key for {cls}, got {raw_value}")
draccus.utils.ParsingError: Expected a dict with a 'type' key for <class 'lerobot.configs.policies.PreTrainedConfig'>, got {'n_obs_steps': 1, 'normalization_mapping': {'VISUAL': 'MEAN_STD', 'STATE': 'MEAN_STD', 'ACTION': 'MEAN_STD'}, 'input_features': {'observation.state': {'type': 'STATE', 'shape': [6]}, 'observation.images.top': {'type': 'VISUAL', 'shape': [3, 240, 424]}, 'observation.images.center-left': {'type': 'VISUAL', 'shape': [3, 240, 424]}, 'observation.images.center-right': {'type': 'VISUAL', 'shape': [3, 240, 424]}}, 'output_features': {'action': {'type': 'ACTION', 'shape': [6]}}, 'device': 'cuda', 'use_amp': False, 'chunk_size': 100, 'n_action_steps': 100, 'vision_backbone': 'resnet18', 'pretrained_backbone_weights': 'ResNet18_Weights.IMAGENET1K_V1', 'replace_final_stride_with_dilation': False, 'pre_norm': False, 'dim_model': 512, 'n_heads': 8, 'dim_feedforward': 3200, 'feedforward_activation': 'relu', 'n_encoder_layers': 4, 'n_decoder_layers': 1, 'use_vae': True, 'latent_dim': 32, 'n_vae_encoder_layers': 4, 'temporal_ensemble_coeff': None, 'dropout': 0.1, 'kl_weight': 10.0, 'optimizer_lr': 1e-05, 'optimizer_weight_decay': 0.0001, 'optimizer_lr_backbone': 1e-05}
